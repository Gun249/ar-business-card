// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// 1. Define the generator for Prisma Client
generator client {
  provider = "prisma-client-js"
}

// 2. Define your database connection
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// 3. Define your data models

// ========== User and Authentication ==========

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  username      String    @unique
  email         String    @unique
  password      String
  role          Role      @default(user)
  createdAt     DateTime  @default(now())

  // Relations
  cards         Card[]
  media         Media[]
  logs          Log[]     @relation("ActorLogs")
}

enum Role {
  user
  admin
}


// ========== Card Information ==========

model Card {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  cardName      String
  namemind      String?
  targetid      Int?
  createdAt     DateTime  @default(now())

  // Relations
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @db.ObjectId
  template      CardTemplate @relation(fields: [templateId], references: [id])
  templateId    String    @db.ObjectId
  contactInfo   ContactInfo? @relation(fields: [contactInfoId], references: [id])
  contactInfoId String?   @unique @db.ObjectId
  media         Media?    @relation(fields: [mediaId], references: [id])
  mediaId       String?   @unique @db.ObjectId
  logs          Log[]     @relation("TargetLogs")
}

model Media {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  profilePicture  String?
  introVideo      String?
  createdAt       DateTime  @default(now())

  // Relations
  user            User      @relation(fields: [userId], references: [id])
  userId          String    @db.ObjectId
  portfolioItems  PortfolioItem[]
  card            Card?
}

// Separate model for portfolio items since it's an array of objects
model PortfolioItem {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  url             String
  title           String
  description     String

  // Relation
  media           Media @relation(fields: [mediaId], references: [id])
  mediaId         String @db.ObjectId
}


// A new model for contact info, inferred from the structure
model ContactInfo {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  phone     String?
  email     String?
  website   String?
  linkedin  String?
  social    String?

  // Relation
  card      Card?
}


// ========== Templates ==========

model CardTemplate {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  templateName  String
  previewImage  String
  createdBy     String?
  createdAt     DateTime @default(now())

  // Relations
  cards         Card[]
  profileLayout ProfileLayout?
  buttons       ButtonConfig[]
}

// Model for the complex profileLayout object
model ProfileLayout {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName    LayoutConfig
  position    LayoutConfig
  company     LayoutConfig

  // Relation
  template    CardTemplate @relation(fields: [templateId], references: [id])
  templateId  String       @unique @db.ObjectId
}

// Model for buttons array
model ButtonConfig {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  type        String
  label       String
  defaultIcon String
  position    Vector3
  rotation    Vector3
  scale       Vector3

  // Relation
  template    CardTemplate @relation(fields: [templateId], references: [id])
  templateId  String       @db.ObjectId
}


// ========== Logging ==========

model Log {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  timestamp   DateTime @default(now())
  actorType   String
  action      String
  targetType  String
  status      String
  message     String

  // Relations
  actor       User     @relation("ActorLogs", fields: [actorId], references: [id])
  actorId     String   @db.ObjectId

  // Target can be different models, so we store the ID as a string.
  // The relation logic is handled in the application code.
  target      Card     @relation("TargetLogs", fields: [targetId], references: [id])
  targetId    String   @db.ObjectId
}


// ========== Composite Types for Reusability ==========

// Reusable type for position, rotation, and scale
type Vector3 {
  x Float
  y Float
  z Float
}

// Reusable type for layout configuration
type LayoutConfig {
  position Vector3
  rotation Vector3
  scale    Vector3
  color    String
}